from common import *

TIME=0
FNAME=1
LINE=2
FUNC=3
VAR=4
TOP=5
BTM=6
VMA=1

def createPT():
    print "$ create page table"
    with open(get_path('merge'), 'r') as merge:
         global page_table
         page_table = dict()
         open_sub_area()
         for ts in merge:
             item = ts.split(',')
             if len(item) > 2 : 
                add_page_table(item)
             else:
                classify_area(item)
         close_sub_area()


def add_page_table(item):
    vpn = int(item[TOP])/get_page_size()
    dump = [item[TIME], item[FNAME], item[LINE], item[FUNC], item[VAR], item[TOP], item[BTM]] 

    if vpn in page_table:
        page_table[vpn].append(dump)
        print pate_table[vpn]
    else:
        page_table[vpn] = [] 
        page_table[vpn].append(dump)


def classify_area(item): 
    vpn = int(item[VMA])/get_page_size()
    try:
       timestamps = page_table[vpn]
       timestamps.sort(reverse=True)
       for ts in timestamps:
           if ts[TIME] <= item[TIME]:
               # compare with the range
              if ts[TOP] <= item[VMA] and  item[VPA] <= ts[BTM]: 
                 item.extend({ts[FNAME], ts[LINE], ts[FUNC], ts[VAR]})
                 print item
                 write_in_area(item)
    except KeyError:
           write_in_area(item)


def open_sub_area():
    global area_subs
    area_subs = []
    for side in area:
        area_subs.append(open(get_path(side), 'w'))


def close_sub_area():
    for side in area:
        area_subs[area.index(side)].close()
        if is_false_generated(get_path(side)):
           clean_up(get_path(side))


borders = ['0x2000000', '0x40000000', '0x60000000',  '0xA0000000', '0xE0000000', '0xE0100000']
def write_in_area(item):
    area_num = 1
    vpn = int(item[VMA]) / get_page_size()
    for border in borders:
        if  item[VMA]  < int(border, 16):
           break
        area_num+=1  
    instr=""
    for unit in item:
        instr="%s, %s"%(unit, instr)
    instr = "\n"
    area_subs[area_num].write(instr)
    area_subs[0].write(instr)






